.TH apdiff 1 "apdiff" "27 Oct 2016" "version 2016.10.27"

.SH NAME
apdiff\~\-\~Print contiguous filename difference among similarly named files

.SH SYNOPSIS
apdiff \fBFILE...\fP

.SH EXAMPLES
For each \fBFILE\fP, \fBapdiff\fP outputs the contiguous subsequence in that
file's name by which it differs from other similarly named files. The intended
use of \fPapdiff\fP is to help in batch conversion of a lot of automatically
named files, so that you don't have to use \fBgrep\fP and co to extract indices
or whatever from filenames.

Here's how you could automatically extract sound from a lot of anime episodes:
.PP
.nf
.RS
$ ls *.mkv
Cory_in_the_House_[08].mkv
Cory_in_the_House_[09].mkv
Cory_in_the_House_[10].mkv
Cory_in_the_House_[11].mkv
$ cat script
#!/bin/sh
for FILE in *.mkv ; do
    ffmpeg -i "$FILE" sound_"$(GLOB='*.mkv' apdiff "$FILE")".wav
done
$ ./script
$ ls *.wav
sound_08.wav
sound_09.wav
sound_10.wav
sound_11.wav
.RE
.fi
.PP

Or here's how one would use \fBapdiff\fP to implement something similar to
Makefile's .c.o rule (don't actually do that):
.PP
.nf
.RS
for SOURCE in *.c ; do
    cc "$SOURCE" -c -o "$(GLOB='*.c' apdiff "$SOURCE").o"
done
.RE
.fi
.PP

.SH DESCRIPTION
\fBapdiff\fP (\fIa\fPll \fIp\fPaths' \fIdiff\fP) computes the largest
contiguous subsequence of each its input filenames by which this filename
differs from other similar files in the same directory. Simplified, the
following happens to each \fBFILE\fP that \fBapdiff\fP receives as an argument:

.nr step 1 1
.IP \n[step] 4
\fBapdiff\fP finds the parent directory of \fBFILE\fP\~\-\~\fBparent_path\fP.
.IP \n+[step]
Sibling paths are found via \fBos.listdir(parent_path)\fP; only paths matching
\fB$GLOB\fP Unix-style path glob (\fB*\fP by default) are considered for the
next step.
.IP \n+[step]
Among selected siblings, paths similar to \fBFILE\fP are selected via
\fBdifflib.get_close_matches\fP. The maximum of \fB$MAX_NEIGHBORS\fP
(\fB1000\fP by default) is produced, and similarity (i.e. edit distance weighed
by string length) of these close matches must equal \fB$CUTOFF\fP (\fB0.7\fP by
default) or more.
.IP \n+[step]
Among selected close paths, a diff conjunction is performed. This step finds
the longest contiguous subsequence of \fBFILE\fP by which it differs with any
of those close paths. For instance, if \fBFILE\fP equals \fBlog-7-15-2.txt\fP
and close paths are \fBlog-23.txt\fP and \fBlog-445-2-4.txt\fP, the result will
be \fB7-15-2\fP.
.IP \n+[step]
The subsequence is then printed to stdout as the result. All these steps are
repeated independently for each input \fBFILE\fP.

.SH ENVIRONMENT
.TP
\fBMAX_NEIGHBORS\fP
Maximum amount of similarly named neighbor files that will be considered when
computing the diff subsequence. Default: \fB1000\fP

.TP
\fBCUTOFF\fP
Minimum required similarity between neighbor paths and argument path. Paths
with less similarity than this will not be considered in the final diff
subsequence computation. Default: \fB0.7\fP

.TP
\fBGLOB\fP
Linux-style glob that all neighbor files are filtered by. Default: \fB*\fP

.SH REQUIREMENTS
\fBPython\fP 2 or 3

.SH AUTHOR
Developed by Ilya Terentyev <bacondropped@gmail.com> as a part of the
\fBbacontools\fP package <https://github.com/bacondropped/bacontools>.

.SH LICENSE
\fBapdiff\fP is distributed under the terms of the MIT license.

.SH SEE ALSO
\fBbacontools\fP(7)
