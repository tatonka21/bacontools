#!/usr/bin/env python2
# Usage: git-ls [DIR | FILE ...]
# List all Git-tracked files in a directory in a Github style.
#
# TODO: ls-like sorting arguments (passed directly to ls)
# TODO: color
# TODO: code-refactoring-cat.gif
# TODO: print argument paths when there are multiple, like ls does
# XXX: could the current algorithm be optimized? Takes infinity to run on active projects like Linux

import os
import sys
import subprocess
import argparse


def align_field(string, width, alignment='r'):
    substring = string[:width] if alignment is 'l' else string[-width:]

    if   alignment is 'r':
        return substring.rjust(width)
    elif alignment is 'l':
        return substring.ljust(width)
    else:
        raise ValueError('Alignment is "'+ alignment +'", must be "r" or "l"')


def columnize(row_list, alignments, separator_string=' '):
    result = []
    maxlen = {}

    for r in row_list:
        fields = r.split('\t')
        for index, f in enumerate(fields):
            maxlen[index] = max(maxlen.get(index, 0), len(f))

    for r in row_list:
        result.append(separator_string.join([
            align_field(f, maxlen[i], alignments.get(i, 'l'))
            for (i, f)
            in enumerate(r.split('\t'))
        ]))

    return result


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('path', default=['.'], nargs='*')
    args = parser.parse_args()

    rows  = []

    for p in args.path:
        if not os.path.exists(p):
            sys.stderr.write('path \'{}\' does not exist\n'.format(p))
            exit(1)

        parent = os.path.dirname(os.path.abspath(p)) if os.path.isfile(p) else os.path.abspath(p)
        filepath = os.path.curdir if os.path.isdir(p) else os.path.relpath(p, parent)

        try:
            git_files = set(
                subprocess.check_output(
                    ['git', 'ls-tree', '--name-only', 'HEAD', filepath],
                    cwd=parent,
                ).
                split('\n')[:-1]
            )
        except subprocess.CalledProcessError:
            sys.stderr.write("`cd {} ; git ls-tree --name-only HEAD {}` exited with a non-zero status\n".format(parent, filepath))
            exit(1)

        for f in git_files:
            try:
                rows.append(f+'\t'+subprocess.check_output([
                    'git',
                    'log',
                    '-1',
                    '--pretty=format:%cr%x09%h%x09%s%x09%cn',
                    '--',
                    f],
                    cwd=parent).
                strip())
            except subprocess.CalledProcessError:
                sys.stderr.write("`cd {} ; git log -1 --pretty=format:%cr%x09%h%x09%s%x09%cn -- {}` exited with a non-zero status\n".format(parent, f))
                exit(1)

    for r in columnize(rows, {}):
        print(r)
