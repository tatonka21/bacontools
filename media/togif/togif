#!/bin/sh
# ./togif.sh /home/user/video.mkv resultgifname

FRAMES=${FRAMES-475}
PIXELS=${PIXELS-100000}
HW_THREADS="${THREADS-"$(grep -c processor /proc/cpuinfo)"}"
THREADS="${HW_THREADS-2}"
DELAY="${DELAY-12}"

quiet_echo() {
	if [ -z "$QUIET" ]; then
		echo "$@"
	fi
}

try_notify() {
	if [ "$(command -v notify-send 1>/dev/zero 2>/dev/zero ; echo $?)" = 0 ] ; then
		notify-send "$1"
	fi
}

is_video_file() {
	VSTREAM_LINES="$(ffprobe "$1" 2>&1 | grep Video | grep -c Stream)"

	if [ "$VSTREAM_LINES" = "0" ] ; then
		exit
	else
		echo 1
	fi
}

datediff() {
	DATE1="$(date -d "$1" +%s)"
	DATE2="$(date -d "$2" +%s)"
	echo "$(( (DATE2 - DATE1) ))"
}

if [ "$(command -v ffmpeg 1>/dev/zero 2>/dev/zero ; echo $?)" = 1 ] ; then
	echo "\`ffmpeg\' is required, but not installed" 1>&2
	exit 1
fi

if [ "$(command -v convert 1>/dev/zero 2>/dev/zero ; echo $?)" = 1 ] ; then
	echo "\`convert\' from ImageMagick is required, but not installed" 1>&2
	exit 1
fi

if [ "$(command -v gifsicle 1>/dev/zero 2>/dev/zero ; echo $?)" = 1 ] ; then
	echo "\`gifsicle\' is required, but not installed" 1>&2
	exit 1
fi

if [ -e "$1" ]; then
	true
else
	echo "No such file: $1"
	exit 1
fi

if [ -z "$2" ]; then
	echo "No output name provided"
	exit 1
fi

if [ -z "$(is_video_file "$1")" ] ; then
	echo "No video streams in $1" 1>&2
	exit 1
fi

DURATION=${DURATION-"$(ffprobe -show_format -show_streams "$1" 2>/dev/null | grep -Po '(?<=duration=)[0-9.]*' | head -n 1 )"}
WIDTH=${WIDTH-"$(ffprobe -show_format -show_streams "$1" 2>/dev/null | grep -Po '(?<=width=)[0-9.]*' | head -n 1)"}
HEIGHT=${HEIGHT-"$(ffprobe -show_format -show_streams "$1" 2>/dev/null | grep -Po '(?<=height=)[0-9.]*' | head -n 1)"}
FPS=${FPS-"$(python -c "print(1.0*$(( FRAMES-2 ))/$DURATION)")"}
SCALE=${SCALE-"$(python -c "print((1.0*$PIXELS/$WIDTH/$HEIGHT)**0.5)")"}
STARTTIME=${STARTTIME-"$(date --rfc-3339=seconds)"}
RESULT_FILENAME="$2.$FRAMES.gif"

if [ -z "$FRAMES" ]; then
	echo "\$FRAMES variable is unset or empty; positive integer required"
	exit 1
fi

if [ -z "$PIXELS" ]; then
	echo "\$PIXELS variable is unset or empty; positive integer required"
	exit 1
fi

if [ -z "$THREADS" ]; then
	echo "\$THREADS variable is unset or empty; positive integer required"
	exit 1
fi

if [ -z "$DURATION" ]; then
	echo "Unable to calculate \$DURATION: do you have ffprobe installed?"
	exit 1
fi

if [ -z "$DELAY" ]; then
	echo "\$DURATION variable is unset or empty; positive integer required"
	exit 1
fi

if [ -z "$WIDTH" -o "$WIDTH" = 0 ]; then
	echo "\$WIDTH is \'$WIDTH\', must be a natural integer; problematic input?"
	exit 1
fi

if [ -z "$HEIGHT" -o "$HEIGHT" = 0 ]; then
	echo "\$HEIGHT is \'$HEIGHT\', must be a natural integer; problematic input?"
	exit 1
fi

if [ -z "$FPS" -o "$FPS" = 0 ]; then
	echo "\$FPS is \'$HEIGHT\', must be a natural integer; problematic input?"
	exit 1
fi

if [ -z "$SCALE" -o "$SCALE" = 0 ]; then
	echo "\$SCALE is \'$SCALE\', shouldn't be unset or zero; problems with Python?"
	exit 1
fi

if [ -n "$NOSTATS" -o -n "$QUIET" ]; then
	NOSTATS=no
fi

quiet_echo "File: $1"
quiet_echo "Output name: $RESULT_FILENAME"
quiet_echo "Frame count: $FRAMES"
quiet_echo "Pixel count: $PIXELS"
quiet_echo "Duration: $DURATION"
quiet_echo "Width: $WIDTH"
quiet_echo "Height: $HEIGHT"
quiet_echo "FPS: $FPS"
quiet_echo "Scale: $SCALE"
quiet_echo "Delay: $DELAY/100 seconds"
quiet_echo "Threads: $THREADS"

try_notify "$RESULT_FILENAME started at $STARTTIME"
quiet_echo "$RESULT_FILENAME started at $STARTTIME"

mkdir -p "$RESULT_FILENAME.frames"

ffmpeg -v quiet -"$NOSTATS"stats -threads "$THREADS" -i "$1" -threads "$THREADS" -r "$FPS" -vf scale=iw*"$SCALE":-1 "$RESULT_FILENAME.frames/%04d.png" #2>/dev/null
convert -delay "$DELAY" -loop 0 "$RESULT_FILENAME.frames/*.png" -verbose -limit memory 200MB -limit disk 200MB -limit map 75MB "$RESULT_FILENAME"

stat "$RESULT_FILENAME" | head -n4
file "$RESULT_FILENAME"
gifsicle --info "$RESULT_FILENAME" | head -n2

ENDTIME="$(date --rfc-3339=seconds)"
TIMEELAPSED="$(datediff "$STARTTIME" "$ENDTIME")"
COMPLETEMSG="$RESULT_FILENAME completed in $(( (TIMEELAPSED/60) ))m"
try_notify "$COMPLETEMSG"
quiet_echo "$RESULT_FILENAME ended at $ENDTIME, taking $(( (TIMEELAPSED/60) ))m"

rm -r "$RESULT_FILENAME.frames"
