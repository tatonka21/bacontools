#!/bin/bash
# Usage: preptrack FILE [FILE ...]
# Extract first audio stream from media files with ffmpeg, recode to MP3, tag
#
# TODO: detect redirect, run non-interactively in this case
# TODO: handle FLAC files via metaflac

if [ -n "$V1" ]; then
	echo "Using ID3v1" 1>&2
	V1="-1"
fi

if [ "$(command -v eyeD3 1>/dev/null 2>/dev/null ; echo $?)" != "0" ]; then
	echo "eyeD3 program and eyed3 Python module are required" 1>&2
	exit 1
fi

trim() {
	sed -e 's/^[[:space:]]*//' | sed -e 's/[[:space:]]*$//'
}

eyed3_get_tag() {
	FILENAME="${1//\'/\\\'}"
	python2 <<SCRIPT
# -*- coding: utf-8 -*-
import eyed3
f = eyed3.load(u'$FILENAME')
if not f:
	exit()
try:
	print(unicode(f.tag.getTextFrame(eyed3.id3.frames.$2)).encode('utf-8'))
except:
	print("")
SCRIPT
}

id3_check_tag_length() {
	if [ -n "$V1" ]; then
		if [ "$(printf "%s" "$1" | wc -c)" -gt 30 ]; then
			echo "Warning: ID3v1 tags are truncated to 30 bytes!" 1>&2
		fi
	fi
}

process() {
	DIR="${DIR:-$HOME/Music}"
	FILE="$1"

	echo "Processing file $FILE"

	if [ ! -f "$FILE" ]; then
		echo "File $FILE does not exist" 1>&2
		return 1
	fi

	MAX_BITRATE="${MAX_BITRATE:-320}"
	DETECTED_BITRATE="$(ffprobe -i "$FILE" 2>&1 | grep Stream | grep Audio | grep kb | head -n1 | grep -oP "(\d+)(?= kb\/s)")"

	ARTIST="$(eyed3_get_tag "$FILE" ARTIST_FID)"
	read -r -e -p "Artist: " -i "$ARTIST" ARTIST
	id3_check_tag_length "$ARTIST"

	ALBUM="$(eyed3_get_tag "$FILE" ALBUM_FID)"
	read -r -e -p "Album: " -i "$ALBUM" ALBUM
	id3_check_tag_length "$ALBUM"

	TITLE="$(eyed3_get_tag "$FILE" TITLE_FID)"
	read -r -e -p "Title: " -i "$TITLE" TITLE
	id3_check_tag_length "$TITLE"

	if [ -n "$BITRATE" ] ; then
		FINAL_BITRATE="$BITRATE"
	elif [ -n "$MAX_BITRATE" ] ; then
		if [ -n "$DETECTED_BITRATE" ] ; then
			FINAL_BITRATE="$(( DETECTED_BITRATE < MAX_BITRATE ? DETECTED_BITRATE : MAX_BITRATE ))"
		else
			FINAL_BITRATE="$MAX_BITRATE"
		fi
	fi

	read -r -e -p "Bitrate (kb/s): " -i "$FINAL_BITRATE" FINAL_BITRATE

	if [ -n "$DETECTED_BITRATE" ] && [ "$FINAL_BITRATE" -gt "$DETECTED_BITRATE" ] ; then
		echo "Warning: encoding with higher bitrate than the source: $FINAL_BITRATE kb/s vs $DETECTED_BITRATE kb/s" 1>&2
	fi

	# Extract embedded pictures
	TMP_PIC_DIR="$(mktemp --directory)"
	eyeD3 $V1 --write-images="$TMP_PIC_DIR" "$FILE" 1>/dev/null 2>/dev/null
	FIRST_IMG="$(find "$TMP_PIC_DIR" -mindepth 1 | head -1)"

	if [ -n "$FIRST_IMG" ] ; then
		read -r -e -p "Embedded pictures found; preserve? [y/N] " PRESERVE_PIC
		PRESERVE_PIC="$(echo "$PRESERVE_PIC" | trim)"
	fi

	NEW_FILEPATH="$DIR/$(echo "$ARTIST - $TITLE" | sed 's/\///g').mp3"
	mkdir -p "$DIR"

	if [ -e "$NEW_FILEPATH" ]; then
		read -r -e -p "File '$NEW_FILEPATH' exists; overwrite? [y/N] " DO_OVERWRITE
		DO_OVERWRITE="$(echo "$DO_OVERWRITE" | trim | cut -c1)"

		if [ "$DO_OVERWRITE" = "y" ] || [ "$DO_OVERWRITE" = "Y" ]; then
			ffmpeg -y -loglevel quiet -i "$FILE" -b:a "$FINAL_BITRATE"k "$NEW_FILEPATH"
		else
			exit 1
		fi
	fi

	if [ "$(command -v mat &>/dev/null ; echo $?)" = "0" ] && [ -z "$DONT_MAT" ]; then
		mat "$NEW_FILEPATH" 1>/dev/null 2>/dev/null
		find "$TMP_PIC_DIR" -mindepth 1 -exec mat \{\} \; 1>/dev/null 2>/dev/null
	fi

	eyeD3 --remove-all "$NEW_FILEPATH" 1>/dev/null 2>/dev/null

	if [ -n "$ARTIST" ] ; then
		eyeD3 $V1 --encoding=utf8 --artist "$ARTIST" "$NEW_FILEPATH" 1>/dev/null 2>/dev/null
	fi

	if [ -n "$ALBUM" ] ; then
		eyeD3 $V1 --encoding=utf8 --album "$ALBUM" "$NEW_FILEPATH" 1>/dev/null 2>/dev/null
	fi

	if [ -n "$TITLE" ] ; then
		eyeD3 $V1 --encoding=utf8 --title "$TITLE" "$NEW_FILEPATH" 1>/dev/null 2>/dev/null
	fi

	if [ "$PRESERVE_PIC" = "y" ] || [ "$PRESERVE_PIC" = "Y" ]; then
		find "$TMP_PIC_DIR" -mindepth 1 -exec bash -c 'eyeD3 --add-image="$1:$(basename "$1" | sed "s/\..*$//g")" "'"$NEW_FILEPATH"'"' funcname '{}' \; 1>/dev/null 2>/dev/null
	fi

	echo "$NEW_FILEPATH"

	if [ "$(command -v notify-send 1>/dev/null 2>/dev/null ; echo $?)" = "0" ]; then
		notify-send "preptrack: $TITLE completed"
	fi
}

for file in "$@" ; do
	process "$file"
done
