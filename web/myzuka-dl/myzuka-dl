#!/usr/bin/env ruby
# -*- coding: UTF-8 -*-

require 'rubygems'
require 'capybara'
require 'capybara/poltergeist'
require 'highline/import'
require 'net/http'
require 'open-uri'
require 'optparse'
require 'ostruct'
require 'uri'
require 'fileutils'

MYZUKA_DOMAIN = "myzuka.fm"
MYZUKA_HOME   = "https://#{MYZUKA_DOMAIN}/"
MAX_RESULTS   = Integer(ENV.fetch('MAX_RESULTS', '20'))
TIMEOUT       = Integer(ENV.fetch('TIMEOUT', '60'))

def a(node)
  node.find(:xpath, './/p').text
end

def t(node)
  node.find(:xpath, './/h4').text
end

def tm(node)
  node.find(:xpath, './/div[@class=\'time\']').text
end

module Myzuka
  class Downloader
    def download(s, opts)
      output_path = opts.dir ? opts.dir : ENV.fetch('DIR', '.')
      FileUtils::mkdir_p(output_path)

      session = Capybara::Session.new(:poltergeist)
      session.visit(MYZUKA_HOME)

      session.fill_in 'SearchText', :with => s
      session.find(:xpath, "//input[@type='submit' and @value='Поиск']").click

      sleep(10)
      session.execute_script('window.scrollBy(0,100000)')

      results = session.all(:xpath, "//div[@class='players-list']//div[@class='player-inline']").take(MAX_RESULTS).map do |div|
        {
          :artist => a(div),
          :title  => t(div),
          :time   => tm(div),
          :url    => div.find(:xpath, ".//a")[:href]
        }
      end

      unless results.any? then
        STDERR.puts("No results for query #{s}")
        return
      end

      displayed_results = [results.size, MAX_RESULTS].min

      idx_maxlen    = (results.size+1).to_s.length
      artist_maxlen = results.map{|r| r[:artist].length}.max
      title_maxlen  = results.map{|r| r[:title].length}.max
      time_maxlen   = results.map{|r| r[:time].length}.max

      unless opts.index_list then
        results.take(MAX_RESULTS).each_with_index do |hit, index|
          idx    = (index+1).to_s.rjust(idx_maxlen)
          artist = hit[:artist].ljust(artist_maxlen)
          title  = hit[:title].ljust(title_maxlen)
          time   = ("(" + hit[:time] + ")").rjust(time_maxlen + 2)
          STDERR.puts("#{idx}  #{artist}  #{title}  #{time}")
        end
      end

      idx_list = \
      if opts.index_list then
        opts.index_list
      else
        begin
          ask("Download track # ")
        rescue EOFError
          ""
        end
      end.split(/[,\s]+/).map{|i| Integer(i) rescue 0}

      idx_list.each do |i|
        unless i >= 1 and i <= displayed_results
          STDERR.puts "Invalid index #{i}, must be an integer from 1 to #{displayed_results}"
          next
        end

        hit = results[i-1]

        session.visit(hit[:url])

        sleep(5)
        session.execute_script('window.scrollBy(0,100000)')
        sleep(5)

        down_link = session.find(:xpath, "//div[@class='aside']/a", :visible => :all)[:href] rescue begin
          STDERR.puts "Unable to find download link on page #{session.current_url}"
          next
        end

        download = open(Net::HTTP.get_response(URI(down_link))['location'])
        directory = output_path.tr("\000", "")
        filename = File.basename("#{hit[:artist]} - #{hit[:title]}.mp3".tr("/\000", ""))
        final_path = File.join(directory, filename)
        puts("#{final_path}")
        IO.copy_stream(download, final_path)
      end
    end
  end
end

$terminal = HighLine.new($stdin, $stderr)

cli_options = OpenStruct.new
phantom_opts = []

OptionParser.new do |option|
  option.on('-t', '--tor') {|o| cli_options.tor = true}
  option.on('-d PATH', '--dir PATH') {|o| cli_options.dir = o}
  option.on('-n INDEX', '--index INDEX') {|o| cli_options.index_list = o}
end.parse!

phantom_opts = ['--proxy-type=socks5', '--proxy=127.0.0.1:9050'] if cli_options.tor

Capybara.register_driver :poltergeist do |app|
  Capybara::Poltergeist::Driver.new(app, {js_errors: false, timeout: TIMEOUT, :phantomjs_options => phantom_opts})
end

Capybara.run_server            =  false
Capybara.current_driver        = :poltergeist
Capybara.app_host              =  MYZUKA_HOME

if ARGV.empty? then
  begin
    Myzuka::Downloader.new.download((ask "Search for "), cli_options)
  rescue EOFError
    exit
  end
end

ARGV.each do |arg|
  Myzuka::Downloader.new.download(arg, cli_options)
end
