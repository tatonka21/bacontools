#!/usr/bin/env ruby

# TODO: columnize search results
# TODO: output directory/filename option

require 'rubygems'
require 'capybara'
require 'capybara/poltergeist'
require 'highline/import'
require 'net/http'
require 'open-uri'
require 'optparse'
require 'ostruct'
require 'uri'

MYZUKA_DOMAIN = "myzuka.fm"
MYZUKA_HOME   = "https://#{MYZUKA_DOMAIN}/"
MAX_RESULTS   = 20
TIMEOUT       = 60

def a(node)
  node.find(:xpath, './/p').text
end

def t(node)
  node.find(:xpath, './/h4').text
end

def tm(node)
  node.find(:xpath, './/div[@class=\'time\']').text
end

module Myzuka
  class Downloader
    def download(s)
      session = Capybara::Session.new(:poltergeist)
      session.visit(MYZUKA_HOME)

      session.fill_in 'SearchText', :with => s
      session.find(:xpath, "//input[@type='submit' and @value='Поиск']").click

      sleep(10)
      session.execute_script('window.scrollBy(0,100000)')

      results = session.all(:xpath, "//div[@class='players-list']//div[@class='player-inline']").map do |div|
        {
          :artist => a(div),
          :title  => t(div),
          :time   => tm(div),
          :url    => div.find(:xpath, ".//a")[:href]
        }
      end

      unless results.any? then
        puts("No results for query #{s}")
        return
      end

      displayed_results = [results.size, MAX_RESULTS].min

      results.take(MAX_RESULTS).each_with_index do |hit, index|
        puts("#{index+1}. #{hit[:artist]} - #{hit[:title]} (#{hit[:time]})")
      end

      ask("Download track # ").split(/[,\s]+/).map{|i| Integer(i) rescue 0}.each do |i|
        unless i >= 1 and i <= displayed_results
          puts "Invalid index #{i}, must be an integer from 1 to #{displayed_results}"
          next
        end

        hit = results[i-1]

        session.visit(hit[:url])

        sleep(5)
        session.execute_script('window.scrollBy(0,100000)')
        sleep(5)

        down_link = session.find(:xpath, "//div[@class='aside']/a", :visible => :all)[:href]

        download = open(Net::HTTP.get_response(URI(down_link))['location'])
        filename = File.basename("#{hit[:artist]} - #{hit[:title]}.mp3".tr("/\000", " "))
        puts("#{filename}")
        IO.copy_stream(download, filename)
        end
    end
  end
end

cli_options = OpenStruct.new
phantom_opts = []

OptionParser.new do |option|
  option.on('-t', '--tor') {|o| cli_options.tor = true}
end.parse!

phantom_opts = ['--proxy-type=socks5', '--proxy=127.0.0.1:9050'] if cli_options.tor

Capybara.register_driver :poltergeist do |app|
  Capybara::Poltergeist::Driver.new(app, {js_errors: false, timeout: TIMEOUT, :phantomjs_options => phantom_opts})
end

Capybara.run_server            =  false
Capybara.current_driver        = :poltergeist
Capybara.app_host              =  MYZUKA_HOME

if ARGV.empty? then
  Myzuka::Downloader.new.download(ask "Search for ")
end

ARGV.each do |arg|
  Myzuka::Downloader.new.download(arg)
end
