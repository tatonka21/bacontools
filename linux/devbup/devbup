#!/bin/bash
# shellcheck disable=SC2001
#
# Usage: [VAR=value] devbup files ...
# Tarball devices or files together and split the archive.
#
# Environment variables
# ---------------------
# NAME=documents              Override the default "timestamp+tz.devbup" naming
#                             scheme.
# DD_COMMAND=dcfldd           Override the 'dd' command. If equals 'dcfldd',
#                             'statusinterval' will also be added (64 by
# DCFLDD_STATINT=128          Override the default ('64') statusinterval if
#                             DD_COMMAND equals 'dcfldd'.
# CKSUM_COMMAND=md5sum        Override the default ('sha512sum') command.
# IGNORE_CKSUMS=1             Do not exit on checksum mismatch.
# ADD_PADDING=1               Add padding file (read from /dev/urandom) to
#                             prevent size estimations.
# PADDING_SIZE=1241M          Override padding file size.
# PADDING_SOURCE=/dev/zero    Override default (/dev/urandom) file which is
#                             read into the padding.
# RUN_MAT=1                   Run Metadata anonymization toolkit on the
#                             resulting tarball.
# COMPRESS=gzip               Compress the tarball. Available values:
#                             gzip
#                             none
# GPG_COMMAND=gpg2            Override GnuPG command.
# SIGN_KEY="dr.no@acme.io"    Sign all input files with this gpg user-id.
# DIGEST_ALGO=SHA512          Override gpg signing digest via '--digest-algo'
#                             option.
# ENCRYPT_KEY="dr.no@acme.io" Encrypt the tarball with this gpg user-id.
# HIDE_RECIPIENT=1            Use --hidden-recipient during encryption.
# SPLIT_SIZE=512M             Override the default ('256M') split size.
#                             If it equals to 0, no split will be performed.
# DONT_SHRED                  Do not shred files; rm is assumed to be
#                             sufficiently secure instead.
#
# Requirements
# ------------
# bash
# coreutils
# tar
# mat (optional)
# gnupg (optional)
# gzip (optional)
#
# TODO: ddrescue support
# TODO: directory backup support
# TODO: pipe mode (IO seems to be a bottleneck, I mean, no shit)
# TODO: DEVBUP_PRESET=[lax|paranoid]
# TODO: scale default padding size range to total file size
# TODO: allow GPG to choose default encryption/signing key

DCFLDD_STATINT="${DCFLDD_STATINT:-64}"
NAME="${NAME:-$(date '+%s%z').devbup.}"
TARBALL_NAME="$(echo "$NAME" | sed 's/\.$//g').tar"
GPG_NAME="$(echo "$NAME" | sed 's/\.$//g').tar.gpg"
SPLIT_NAME="$NAME"
SPLIT_SIZE="${SPLIT_SIZE:-256M}"
GPG_COMMAND="${GPG_COMMAND:-gpg}"

if [ -z "$DD_COMMAND" ] && [ "$(command -v dcfldd 1>/dev/zero 2>/dev/zero ; echo $?)" = 0 ]; then
	DD_COMMAND=dcfldd
fi

if [ "$(command -v "$DD_COMMAND" 1>/dev/null 2>/dev/null ; echo $?)" != 0 ]; then
	echo "\$DD_COMMAND is \"$DD_COMMAND\", which does not exist in \$PATH" 1>&2
	exit 1
fi

if [ "$(command -v "$CKSUM_COMMAND" 1>/dev/null 2>/dev/null ; echo $?)" != 0 ]; then
	echo "\$CKSUM_COMMAND is \"$CKSUM_COMMAND\", which does not exist in \$PATH" 1>&2
	exit 1
fi

if [ "$(command -v "$GPG_COMMAND" 1>/dev/null 2>/dev/null ; echo $?)" != 0 ]; then
	echo "\$GPG_COMMAND is \"$GPG_COMMAND\", which does not exist in \$PATH" 1>&2
	exit 1
fi

if [ "$(id -u)" != "0" ]; then
	_SUDO="sudo"
fi

if [ -z "$PADDING_SOURCE" ]; then
	PADDING_SOURCE="/dev/urandom"
fi

db_remove() {
	if [ -n "$DONT_SHRED" ]; then
		rm "$1"
	else
		shred -u "$1"
	fi
}

# Copy file to the destination directory, verify checksums, return 1 on
# checksum mismatch
db_deedee() {
	DD_COMMAND="${DD_COMMAND:-dd}"
	CKSUM_COMMAND="${CKSUM_COMMAND:-sha512sum}"

	if [ "$DD_COMMAND" = "dcfldd" ]; then
		$_SUDO "$DD_COMMAND" if="$1" of="$2" statusinterval="$DCFLDD_STATINT"
	else
		$_SUDO "$DD_COMMAND" if="$1" of="$2"
	fi

	if [ "$(id -u)" != "0" ]; then
		$_SUDO chown "$(whoami)": "$2"
	fi

	CHECKSUM_OUTPUT="$($_SUDO "$CKSUM_COMMAND" "$1" "$2")"
	SRC_CHECKSUM="$(echo "$CHECKSUM_OUTPUT" | head -n1 | cut -d\  -f1)"
	RST_CHECKSUM="$(echo "$CHECKSUM_OUTPUT" | tail -n1 | cut -d\  -f1)"

	echo "$SRC_CHECKSUM  $1"
	echo "$RST_CHECKSUM  $2"

	if [[ ( "$SRC_CHECKSUM" != "$RST_CHECKSUM" ) && ( -z "$IGNORE_CKSUMS" ) ]]; then
		echo "Checksum mismatch! Unmount source block devices, close file \
descriptors, and start again." 1>&2
		return 1
	fi
}

db_compress() {
	if [ "$COMPRESS" = "none" ]; then
		echo "$1"
		return
	fi

	if [ "$COMPRESS" = "gzip" ]; then
		gzip -c "$1" > "$1.gzip"
		db_remove "$1"
		echo "$1.gzip"
		return
	fi

	echo "$1"
}

# No arguments provided, cry ourselves to sleep
if [ "$#" -eq 0 ]; then
	echo "Usage: [VAR=value] devbup file ..." 1>&2
	echo "Tarball devices or files together and split the archive." 1>&2
	echo 1>&2
	echo "Read the man page (\`man 1 devbup\`) or source for more information." 1>&2
	echo "Also, refer to the README.md file from the bacontools package:
https://github.com/bacondropped/bacontools/tree/master/linux/devbup" 1>&2

	exit 1
fi

for file in "$@"; do
	TMP_FILE="./$(basename "$file")"
	db_deedee "$file" "$TMP_FILE"

	if [ "$?" = 1 ] && [ -z "$IGNORE_CKSUMS" ]; then
		if [ -n "$DONT_SHRED" ]; then
			REMOVING="Removing"
		else
			REMOVING="Shredding"
		fi

		echo "$REMOVING all copied files and exiting." 1>&2

		for file_to_remove in "$@"; do
			TMP_FILE="./$(basename "$file_to_remove")"

			if [ -e "$TMP_FILE" ]; then
				db_remove "$TMP_FILE"
			fi
		done

		exit 1
	fi

	if [ "$(command -v mat 1>/dev/zero 2>/dev/zero ; echo $?)" = "0" ] && [ \( -n "$RUN_MAT" \) ]; then
		mat -a "$TMP_FILE"
	fi

	tar -rvf "$TARBALL_NAME" "$TMP_FILE"

	if [ -n "$SIGN_KEY" ]; then
		SIGFILE_NAME="$TMP_FILE.sig"

		if [ -n "$DIGEST_ALGO" ]; then
			"$GPG_COMMAND" --detach-sign -u "$SIGN_KEY" --digest-algo="$DIGEST_ALGO" -o "$SIGFILE_NAME" "$TMP_FILE"
		else
			"$GPG_COMMAND" --detach-sign -u "$SIGN_KEY" -o "$SIGFILE_NAME" "$TMP_FILE"
		fi

		tar -rvf "$TARBALL_NAME" "$SIGFILE_NAME"

		db_remove "$SIGFILE_NAME"
	fi

	db_remove "$TMP_FILE"
done

if [ -n "$ADD_PADDING" ] || [ -n "$PADDING_SIZE" ]; then
	PADDING_SIZE="${PADDING_SIZE:-"$(( RANDOM % 4096 ))M"}"

	head -c"$PADDING_SIZE" "$PADDING_SOURCE" > random.bin
	stat random.bin
	tar -rvf "$TARBALL_NAME" random.bin

	db_remove random.bin
fi

tar -tvf "$TARBALL_NAME"

# Compress the tarball
COMPRESSED_TARBALL="$(db_compress "$TARBALL_NAME")"

if [ -n "$ENCRYPT_KEY" ]; then
	if [ -n "$HIDE_RECIPIENT" ]; then
		RECIP_OPTION='--hidden-recipient'
	else
		RECIP_OPTION='--recipient'
	fi

	"$GPG_COMMAND" --encrypt "$RECIP_OPTION"="$ENCRYPT_KEY" -o "$GPG_NAME" "$COMPRESSED_TARBALL"
	db_remove "$COMPRESSED_TARBALL"

	if [ "$SPLIT_SIZE" = "0" ]; then
		mv "$GPG_NAME" "$SPLIT_NAME"
	else
		split -b"$SPLIT_SIZE" "$GPG_NAME" "$SPLIT_NAME"
	fi

	db_remove "$GPG_NAME"
else
	if [ "$SPLIT_SIZE" = "0" ]; then
		mv "$COMPRESSED_TARBALL" "$SPLIT_NAME"
	else
		split -b"$SPLIT_SIZE" "$COMPRESSED_TARBALL" "$SPLIT_NAME"
	fi

	db_remove "$COMPRESSED_TARBALL"
fi
